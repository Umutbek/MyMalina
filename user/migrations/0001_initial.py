# Generated by Django 3.1 on 2021-05-10 10:55

from django.db import migrations, models
import django.db.models.deletion
import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=200)),
                ('login', models.CharField(max_length=200, unique=True)),
                ('phone', models.CharField(blank=True, max_length=200, null=True)),
                ('avatar', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('icon', models.CharField(blank=True, max_length=1000, null=True)),
                ('available', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='RegularAccount',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='user.user')),
                ('datebirth', models.DateField(null=True, verbose_name='День рождение')),
                ('gender', django_fsm.FSMIntegerField(choices=[(1, 'Мужской'), (2, 'Женский'), (3, 'Другое'), (4, 'Не указано')], default=4, verbose_name='Пол')),
                ('code', models.IntegerField()),
                ('firebase_token', models.CharField(blank=True, max_length=500, null=True)),
                ('score', models.IntegerField(default=0, verbose_name='Баллы')),
            ],
            options={
                'abstract': False,
            },
            bases=('user.user',),
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('icon', models.CharField(blank=True, max_length=1000, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user.category')),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='user.user')),
                ('percentage', models.FloatField(default=0, verbose_name='Процент')),
                ('isfavouritestore', models.BooleanField(default=False)),
                ('storeaddress', models.CharField(blank=True, max_length=200, null=True, verbose_name='Адресс')),
                ('deliverycost', models.IntegerField(default=100, verbose_name='Цена службы доставки')),
                ('worktime', models.CharField(blank=True, max_length=200, null=True, verbose_name='Время работы')),
                ('telegram', models.CharField(blank=True, max_length=200, null=True)),
                ('whatsapp', models.CharField(blank=True, max_length=200, null=True)),
                ('instagram', models.CharField(blank=True, max_length=200, null=True)),
                ('slogan', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('rating', models.FloatField(default=5, verbose_name='Рейтинг')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user.category')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user.subcategory')),
            ],
            options={
                'abstract': False,
            },
            bases=('user.user',),
        ),
    ]
